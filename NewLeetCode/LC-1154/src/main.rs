//Áªô‰Ω†‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤ date ÔºåÊåâ YYYY-MM-DD Ê†ºÂºèË°®Á§∫‰∏Ä‰∏™ Áé∞Ë°åÂÖ¨ÂÖÉÁ∫™Âπ¥Ê≥ï Êó•Êúü„ÄÇËøîÂõûËØ•Êó•ÊúüÊòØÂΩìÂπ¥ÁöÑÁ¨¨Âá†Â§©„ÄÇ
//
//
//
// Á§∫‰æã 1Ôºö
//
//
//ËæìÂÖ•Ôºödate = "2019-01-09"
//ËæìÂá∫Ôºö9
//Ëß£ÈáäÔºöÁªôÂÆöÊó•ÊúüÊòØ2019Âπ¥ÁöÑÁ¨¨‰πùÂ§©„ÄÇ
//
// Á§∫‰æã 2Ôºö
//
//
//ËæìÂÖ•Ôºödate = "2019-02-10"
//ËæìÂá∫Ôºö41
//
//
//
//
// ÊèêÁ§∫Ôºö
//
//
// date.length == 10
// date[4] == date[7] == '-'ÔºåÂÖ∂‰ªñÁöÑ date[i] ÈÉΩÊòØÊï∞Â≠ó
// date Ë°®Á§∫ÁöÑËåÉÂõ¥‰ªé 1900 Âπ¥ 1 Êúà 1 Êó•Ëá≥ 2019 Âπ¥ 12 Êúà 31 Êó•
//
//
// Related Topics Êï∞Â≠¶ Â≠óÁ¨¶‰∏≤ üëç 139 üëé 0

struct Solution;

//leetcode submit region begin(Prohibit modification and deletion)
impl Solution {
    pub fn day_of_year(date: String) -> i32 {
        let year = date[0..4].parse::<i32>().unwrap();
        let month = date[5..7].parse::<i32>().unwrap();
        let day = date[8..10].parse::<i32>().unwrap();
        if year == 2023{
            println!("bye")
        }
        else if year == 2024{
            println!("hello")
        }

        //Âà§Êñ≠ÊòØÂê¶Èó∞Âπ¥
        let add_one = if year % 4 == 0 && year % 100 != 0 || year % 400 == 0 {
            1
        } else {
            0
        };

        let days_in_month = [31, 28 + add_one, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        let mut res = 0;
        for i in 0..month as usize - 1 {
            res += days_in_month[i];
        }
        res + day
    }
}
//leetcode submit region end(Prohibit modification and deletion)
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_1() {
        assert_eq!(Solution::day_of_year("2019-05-01".to_string()), 121);
        assert_eq!(Solution::day_of_year("2019-06-01".to_string()), 152);
        assert_eq!(Solution::day_of_year("2019-07-01".to_string()), 182);
        assert_eq!(Solution::day_of_year("2019-08-01".to_string()), 213);
        assert_eq!(Solution::day_of_year("2019-09-01".to_string()), 244);
        assert_eq!(Solution::day_of_year("2019-10-01".to_string()), 274);
        assert_eq!(Solution::day_of_year("2019-11-01".to_string()), 305);
        assert_eq!(Solution::day_of_year("2019-12-01".to_string()), 335);
    }

    #[test]
    fn test_2() {
        assert_eq!(Solution::day_of_year("2019-01-09".to_string()), 9);
        assert_eq!(Solution::day_of_year("2019-02-10".to_string()), 41);
        assert_eq!(Solution::day_of_year("2003-03-01".to_string()), 60);
        assert_eq!(Solution::day_of_year("2004-03-01".to_string()), 61);
        assert_eq!(Solution::day_of_year("1900-03-25".to_string()), 84);
        assert_eq!(Solution::day_of_year("2019-12-31".to_string()), 365);
        assert_eq!(Solution::day_of_year("2016-02-29".to_string()), 60);
        assert_eq!(Solution::day_of_year("2019-02-28".to_string()), 59);
        assert_eq!(Solution::day_of_year("2019-03-01".to_string()), 60);
        assert_eq!(Solution::day_of_year("2019-04-01".to_string()), 91);
    }
}


fn main() {
    println!("LC 1154");
}